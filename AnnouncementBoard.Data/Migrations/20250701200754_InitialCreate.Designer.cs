// <auto-generated />
using System;
using AnnouncementBoard.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AnnouncementBoard.Data.Migrations
{
    [DbContext(typeof(AnnouncementBoardDbContext))]
    [Migration("20250701200754_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AnnouncementBoard.Core.Models.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("AnnouncementBoard.Core.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 1, 20, 7, 53, 753, DateTimeKind.Utc).AddTicks(1888),
                            Description = "Техніка для дому",
                            Name = "Побутова техніка"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 1, 20, 7, 53, 753, DateTimeKind.Utc).AddTicks(2029),
                            Description = "Комп'ютери та комплектуючі",
                            Name = "Комп'ютерна техніка"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 1, 20, 7, 53, 753, DateTimeKind.Utc).AddTicks(2030),
                            Description = "Мобільні телефони",
                            Name = "Смартфони"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 7, 1, 20, 7, 53, 753, DateTimeKind.Utc).AddTicks(2032),
                            Description = "Різне",
                            Name = "Інше"
                        });
                });

            modelBuilder.Entity("AnnouncementBoard.Core.Models.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 7, 1, 20, 7, 53, 753, DateTimeKind.Utc).AddTicks(6334),
                            Description = "",
                            Name = "Холодильники"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 7, 1, 20, 7, 53, 753, DateTimeKind.Utc).AddTicks(6469),
                            Description = "",
                            Name = "Пральні машини"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 7, 1, 20, 7, 53, 753, DateTimeKind.Utc).AddTicks(6470),
                            Description = "",
                            Name = "Бойлери"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 7, 1, 20, 7, 53, 753, DateTimeKind.Utc).AddTicks(6471),
                            Description = "",
                            Name = "Печі"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 7, 1, 20, 7, 53, 753, DateTimeKind.Utc).AddTicks(6473),
                            Description = "",
                            Name = "Витяжки"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 7, 1, 20, 7, 53, 753, DateTimeKind.Utc).AddTicks(6474),
                            Description = "",
                            Name = "Мікрохвильові печі"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 7, 1, 20, 7, 53, 753, DateTimeKind.Utc).AddTicks(6475),
                            Description = "",
                            Name = "ПК"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 7, 1, 20, 7, 53, 753, DateTimeKind.Utc).AddTicks(6476),
                            Description = "",
                            Name = "Ноутбуки"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 7, 1, 20, 7, 53, 753, DateTimeKind.Utc).AddTicks(6477),
                            Description = "",
                            Name = "Монітори"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 7, 1, 20, 7, 53, 753, DateTimeKind.Utc).AddTicks(6478),
                            Description = "",
                            Name = "Принтери"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 7, 1, 20, 7, 53, 753, DateTimeKind.Utc).AddTicks(6479),
                            Description = "",
                            Name = "Сканери"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 7, 1, 20, 7, 53, 753, DateTimeKind.Utc).AddTicks(6480),
                            Description = "",
                            Name = "Android смартфони"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 7, 1, 20, 7, 53, 753, DateTimeKind.Utc).AddTicks(6481),
                            Description = "",
                            Name = "iOS/Apple смартфони"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 7, 1, 20, 7, 53, 753, DateTimeKind.Utc).AddTicks(6482),
                            Description = "",
                            Name = "Одяг"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 7, 1, 20, 7, 53, 753, DateTimeKind.Utc).AddTicks(6483),
                            Description = "",
                            Name = "Взуття"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 7, 1, 20, 7, 53, 753, DateTimeKind.Utc).AddTicks(6552),
                            Description = "",
                            Name = "Аксесуари"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 7, 1, 20, 7, 53, 753, DateTimeKind.Utc).AddTicks(6553),
                            Description = "",
                            Name = "Спортивне обладнання"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 7, 1, 20, 7, 53, 753, DateTimeKind.Utc).AddTicks(6554),
                            Description = "",
                            Name = "Іграшки"
                        });
                });

            modelBuilder.Entity("AnnouncementBoard.Core.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AnnouncementBoard.Core.Models.Announcement", b =>
                {
                    b.HasOne("AnnouncementBoard.Core.Models.Category", "Category")
                        .WithMany("Announcements")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AnnouncementBoard.Core.Models.SubCategory", "SubCategory")
                        .WithMany("Announcements")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AnnouncementBoard.Core.Models.User", "User")
                        .WithMany("Announcements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("SubCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnnouncementBoard.Core.Models.SubCategory", b =>
                {
                    b.HasOne("AnnouncementBoard.Core.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AnnouncementBoard.Core.Models.Category", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("AnnouncementBoard.Core.Models.SubCategory", b =>
                {
                    b.Navigation("Announcements");
                });

            modelBuilder.Entity("AnnouncementBoard.Core.Models.User", b =>
                {
                    b.Navigation("Announcements");
                });
#pragma warning restore 612, 618
        }
    }
}
